name: Build OTA Binary

on:
  push:
    paths:
      - "sketches/**"
      - ".github/workflows/ci.yml"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1‑ Checkout
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        persist-credentials: true

    # 2‑ Instalar Arduino‑CLI
    - name: Setup Arduino‑CLI
      uses: arduino/setup-arduino-cli@v1

    # 3‑ Instalar core ESP32
    - name: Install ESP32 core 2.0.14
      run: |
        arduino-cli core update-index
        arduino-cli core install esp32:esp32@2.0.14

    # 4‑ Librerías necesarias
    - name: Install libraries
      run: |
        arduino-cli lib update-index
        arduino-cli lib install \
          "Adafruit SSD1306" \
          "Adafruit GFX Library" \
          "ArduinoJson"

    # 5‑ Copiar sketch
    - name: Prepare sketch folder
      run: |
        mkdir -p build/automatic
        cp sketches/automatic.ino build/automatic/automatic.ino

    # 6‑ Compilar y exportar binarios
    - name: Compile & export
      run: |
        arduino-cli compile \
          --fqbn esp32:esp32:esp32 \
          --export-binaries \
          build/automatic

    # 7‑ Publicar firmware único + manifest
    - name: Publish firmware & manifest
      env:
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Extraer versión del #define FW_VERSION "<stamp>"
        VER=$(grep -oP '#define\s+FW_VERSION\s+"[0-9]+"' sketches/automatic.ino | grep -oP '[0-9]+' )
        echo "Versión extraída: $VER"

        BIN_SRC=$(find build/automatic -name "*.bin" | head -n1)
        if [ -z "$BIN_SRC" ]; then
          echo "❌ No se encontró .bin"; exit 1
        fi

        FILE=firmware/firmware_${VER}.bin
        mkdir -p firmware
        cp "$BIN_SRC" "$FILE"

        # Crear latest.json
        echo "{\"version\":\"$VER\",\"url\":\"https://raw.githubusercontent.com/${{ github.repository }}/main/$FILE\"}" > firmware/latest.json

        git config user.name  "github-actions[bot]"
        git config user.email "actions@github.com"
        git add "$FILE" firmware/latest.json
        git commit -m "🔨 Build $VER"
        git push "https://x-access-token:${TOKEN}@github.com/${{ github.repository }}.git" HEAD:main
